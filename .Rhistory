source(unzip.R)
source('unzip.R')
source('unzip.R
source(concat.R)
source('concat.R')
source('concat.R')
files
fg
source('concat.R')
files
source('concat.R')
files
list.files(pattern = 'data/raw/*.csv')
files
source('concat.R')
source('concat.R')
source('concat.R')
source('concat.R')
source('concat.R')
source('concat.R')
source('concat.R')
source('concat.R')
c(files)
source('concat.R')
source('concat.R')
source('concat.R')
c(files)
length(files)
source('concat.R')
files
source('concat.R')
source('concat.R')
files
source('concat.R')
tables
source('concat.R')
read_data()
order(files)
files[order(files)]
list.files(path='data/raw', pattern='*.csv', full.names=TRUE)
files = list.files(path='data/raw', pattern='*.csv', full.names=TRUE)
files[order(files)]
help(sort)
data = read_data()
data = read_data()
as.matrix(data)
as.matrix(data, seop=';')
as.matrix(data, sep=';')
source('concat.R')
read_data()[1]
git status
files = list.files(path='data/raw', patter='*.csv', full.names=TRUE)
files
sort(files)
sort(-files)
order(files)
order(-files)
sort(files, decreasing = TRUE)
source('concat.R')
read_data()
\q
exit
exit()
quit()
cran install.packages(nuralnet)
install.packages(nuralnet)
install.packages("nuralnet")
data
data[1:4,]
data[,1:4]
data[1:4]
source('concat.R')
data <= read_data()
data = read_data()
data[1:5]
data[1:3,1:5]
for(i=0; i<10; i++) { echo 'test'; }
for (k in 1:5) { echo 'test'; }
for (k in 1:5) { echo k; }
for (k in 1:5) {k; }
for (k in 1:5) { k }
for (k in 1:5) {}
test = []
help list
help(list)
test = list()
append(test, 3)
test
x <- 1:10
x
append(x, 8)
x
x = append(x, 8)
x
for (k in 1:5) { lol = append(lol, k) }
lol = []
lol = 0:1
for (k in 1:5) { lol = append(lol, k) }
lol
open = 1:nrows(data)
open = 1:nrow(data)
open
top = 1:nrow(data)
bottom = 1:nrow(data)
close = 1:nrow(data)
data[1,]
open = 2:nrow(data)
top = 2:nrow(data)
bottom = 2:nrow(data)
close = 2:nrow(data)
for (i in 2:nrow(data)) {
open = (data[i,'open'] - data[i-1, 'open']) > 0
}
open[1:4]
data[1:4, 'open']
data[2,'open'] - data[1,'open']
(data[2,'open'] - data[1,'open']) > 0
(data[2,'open'] - data[1,'open']) > 0
data[2,'open'] - data[1,'open'] > 0
data[2,'open'] > 0
data[,'open'] > 0
data[1,'open'] > 0
data[1,'open'] > 0
data[2,'open'] > 0
if data[2,'open'] > 0
if(data[2,'open'] > 0) 1
if(data[2,'open'] > 0) 1 else if (data[2, 'open'] < 0) -1 else 0
for (i in 2:nrow(data)) {
if(data[i,'open'] > 0) 1 else if (data[i-1, 'open'] < 0) -1 else 0
}
test <- if(data[i,'open'] > 0) 1 else if (data[i-1, 'open'] < 0) -1 else 0
test
test <- if((data[i,'open'] - data[i-1, 'open']) > 0) 1 else if ((data[i, 'open'] - data[i-1]) < 0) -1 else 0
for (i in 2:nrow(data)) {
open_change = data[i, 'open'] - data[i-1, 'open']
open = if (open_change > 0) 1 else if (open_change < 0) -1 else 0
}
open
for (i in 2:nrow(data)) {
open_change = data[i, 'open'] - data[i-1, 'open']
open = append(open, if (open_change > 0) 1 else if (open_change < 0) -1 else 0)
}
open
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
top = append(open, if (top_change > 0) 1 else if (top_change < 0) -1 else 0)
}
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
top = append(top, if (top_change > 0) 1 else if (top_change < 0) -1 else 0)
}
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
}
top_change
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
top_change
}
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
print top_change
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
top = top_change
}
top
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
top <- top_change
}
top
for (i in 2:nrow(data)) {
top_change = data[i, 'top'] - data[i-1, 'top']
top = append(top, top_change)
}
top
data[0:4
]
top
open
source('concat.R')
data[,'open'g
data[,'open']
open = count_vals(data[,'open'])
open = count_vals(data[,'open'])
open = count_vals(data[,'open'])
open = count_vals(data[,'open'])
source('concat.R')
source('concat.R')
open = count_vals(data[,'open'])
source('concat.R')
open = count_vals(data[,'open'])
source('concat.R')
open = count_vals(data[,'open'])
binary <- 1:nrow(data)
binary
open = count_vals(data[,'open'])
source('concat.R')
open = count_vals(data[,'open'])
open = count_vals(data[,'open'])
data[,'open']
source('concat.R')
source('concat.R')
open = count_vals(data[,'open'])
open
open = count_vals(data)
open
source('concat.R')
source('concat.R')
source('concat.R')
open = count_vals(data)
open
source('concat.R')
open = count_vals(data, 'open')
open
source('concat.R')
open = count_vals(data, 'open')
open
source('concat.R')
open = count_vals(data, 'open')
open
source('concat.R')
source('concat.R')
source('concat.R')
source('concat.R')
open = count_vals(data, 'open')
open
source('concat.R')
open = count_vals(data, 'open')
source('concat.R')
open = count_vals(data, 'open')
source('concat.R')
source('concat.R')
open = count_vals(data, 'open')
source('concat.R')
open = count_vals(data, 'open')
source('concat.R')
open = count_vals(data, 'open')
open
open = count_vals(data, 'open')
ds(open)
sd(open)
data[1:3,]
open = count_vals(data, 'high')
ds(open)
sd(open)
open = count_vals(data, 'low')
sd(open)
open = count_vals(data, 'close')
sd(open)
sd(data)
sd(data[,'open'])
sd(data[,'top'])
sd(data[,'high'])
sd(data[,'bottom'])
sd(data[,'low'])
sd(data[,'close'])
